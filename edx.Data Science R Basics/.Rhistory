q()
install.packages("readxl")
devtools::install_github("JLSteenwyk/ggpubfigs")
install.packages("readxl")
installed.packages("tidyverse")
install.packages("agricolae")
install.packages("devtools")
install.packages("writeXLS")
install.packages("ggpubr")
devtools::install_github("JLSteenwyk/ggpubfigs")
library(ggpubr)
install.packages("ggpubr")
library(readxl)
library(tidyverse)
installed.packages("tidyverse")
installed.packages("tidyverse")
library(agricolae)
library(devtools)
library(writeXLS)
install.packages("writeXLS")
install.packages("WriteXLS")
installed.packages("tidyverse")
library(readxl)
library(tidyverse)
library(agricolae)
library(devtools)
library(WriteXLS)
library(ggpubfigs)
library(ggpubr)
install.packages("ggplot2")
install.packages("ggplot2")
library(agricolae)
library(devtools)
library(WriteXLS)
library(ggplot2)
library(ggpubfigs)
library(ggpubr)
install.packages("tidyverse")
library(readxl)
library(tidyverse)
library(agricolae)
library(devtools)
library(WriteXLS)
library(ggplot2)
library(ggpubfigs)
library(ggpubr)
library(readxl)
library(tidyverse)
library(agricolae)
library(devtools)
library(WriteXLS)
library(ggplot2)
library(ggpubfigs)
library(ggpubr)
data("PlantGrowth")
force(PlantGrowth)
View(PlantGrowth)
View(PlantGrowth)
value_max = PlantGrowth %>%
group_by(group) %>%
summarise(max_value = max(weight))
View(value_max)
hsd = HSD.test(aov(weight ~ group, data = PlantGrowth), trt = "group", group = T)
sig.letters <- hsd$groups[order(row.names(hsd$groups)), ]
ggplot(data = PlantGrowth, aes(x = group, y = weight, fill = group))+
geom_boxplot()+
stat_boxplot(geom = "errorbar", width = 0.1)+
geoom_test(data = value_max, aes(x = group, y = 0.15 + max_value,
label = sig.letters$groups), vjust = 0)+
ggtitle("") + xlab("Treatments") + ylab("Plant weight (g)") +
scale_fill_manual(values = friendly_pal("bright_seven")) + theme_simple() +
theme(legend.position = "none")
ggplot(data = PlantGrowth, aes(x = group, y = weight, fill = group))+
geom_boxplot()+
stat_boxplot(geom = "errorbar", width = 0.1)+
geom_text(data = value_max, aes(x = group, y = 0.15 + max_value,
label = sig.letters$groups), vjust = 0)+
ggtitle("") + xlab("Treatments") + ylab("Plant weight (g)") +
scale_fill_manual(values = friendly_pal("bright_seven")) + theme_simple() +
theme(legend.position = "none")
ggplot(data = PlantGrowth, aes(x = group, y = weight, fill = group))+
geom_boxplot()+
stat_boxplot(geom = "errorbar", width = 0.1)+
geom_text(data = value_max, aes(x = group, y = 0.15 + max_value,
label = sig.letters$groups), vjust = 0)+
ggtitle("") + xlab("Treatments") + ylab("Plant weight (g)") +
scale_fill_manual(values = friendly_pal("bright_seven")) + theme_simple() +
theme(legend.position = "none") +
ggsave("PlantGrowth.tiff", units = "in", width=8, height=8, dpi=300, compression= "lzw")
install.packages("esquisse")
install.packages("hrbrthemes")
install.packages("hrbrthemes")
library(readxl)
library(tidyverse)
library(agricolae)
library(devtools)
library(esquisse)
library(hrbrthemes)
library(ggpubfigs)
hrbrthemes::import_roboto_condensed()
hrbrthemes::import_roboto_condensed()
library(hrbrthemes::import_roboto_condensed())
library(hrbrthemes::import_roboto_condensed)
data("midwest") #Scatter plot
data("iris")
data("mtcars")
esquisser()
data("PlantGrowth")
esquisser()
esquisser()
ggplot(PlantGrowth) +
aes(x = group, y = weight, fill = group) +
geom_boxplot() +
scale_fill_viridis_d(option = "viridis", direction = 1) +
labs(
x = "Treatments",
y = "Plant Weight (g)",
title = "Boxplot-Autoggplot",
fill = "Treatments"
) +
theme_classic()
esquisser()
esquisser()
esquisser()
esquisser()
library(readxl)
library(tidyverse)
library(ggpubr)
#Load Data set in R
data("ToothGrowth")
p1 <- ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = c("#00AFBB", "#E7B80", "#FC4E07"),
add = "jitter", shape = "dose",
xlab = "Dose", ylab = "Length", lengend.title = "Dose")
p1
p1
p1
p1 <- ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = c("blue", "red", "green"),
add = "jitter", shape = "dose",
xlab = "Dose", ylab = "Length", legend.title = "Dose")
p1
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2"))
p1 + stat_compare_means(comparisons = my_comparisons,
method = "t.test",
label = "p.signif",
)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 50)+ylim(0,60)
p1 <- ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = c("blue", "red", "green"),
add = "jitter", shape = "dose",
xlab = "Dose", ylab = "Length", legend.title = "Dose")
p1 + stat_compare_means(label.y = 42,
method = "t.test",
label = "p.signif",
ref.group = "0.5")
p1 <- p1 + stat_compare_means(comparisons = my_comparisons)+
stat_compare_means(label.y = 50)+ylim(0,60)
p1
p2 <- ggboxplot(ToothGrowth, x = "supp", y = "len",
color = "supp", palette = "npg",
add = "jitter",
facet.by = "dose", short.panel.labs = FALSE)
P2
p2
p2 <- p2 + stat_compare_means(
aes(label = paste0("p = ", ..p.format..)))
p2
p3 <- ggviolin(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = c("blue", "red", "green"),
add = "jitter", shape = "dose",
xlab = "Dose", ylab = "Length", legend.title = "Dose")
p3
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2"))
p3 <- p3 + stat_compare_means(comparisons = my_comparisons,
method = "t.test",
label = "p.signif",)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 50)+ylim(0,60)
p3
p4 <- ggboxplot(ToothGrowth, x = "supp", y = "len",
fill = "supp", palette = "npg",
add = "boxplot",
facet.by = "dose", short.panel.labs = FALSE, add.params = list(fill = "white"))
p4
p4 <- ggviolin(ToothGrowth, x = "supp", y = "len",
fill = "supp", palette = "npg",
add = "boxplot",
facet.by = "dose", short.panel.labs = FALSE, add.params = list(fill = "white"))
p4
p4 <- p4 + stat_compare_means(
aes(label = paste0("p = ", ..p.format..)))
p4
p4
p4 <- p4 + stat_compare_means(
aes(label = paste0("p = ", ..p.signif..)))
p4
p4 <- p4 + stat_compare_means(
aes(label = paste0("p = ", ..p.signif..)))
p4
p4 <- p4 + stat_compare_means(
aes(label = paste0(..p.format..)))
p4
p4 <- ggviolin(ToothGrowth, x = "supp", y = "len",
fill = "supp", palette = "npg",
add = "boxplot",
facet.by = "dose", short.panel.labs = FALSE, add.params = list(fill = "white"))
p4 <- p4 + stat_compare_means(
aes(label = paste0(..p.format..)))
p4
p4 <- p4 + stat_compare_means(
aes(label = paste0("p = ", ..p.format..)))
p4 <- p4 + stat_compare_means(
aes(label = paste0(..p.signif..)))
p4
p4 <- ggviolin(ToothGrowth, x = "supp", y = "len",
fill = "supp", palette = "npg",
add = "boxplot",
facet.by = "dose", short.panel.labs = FALSE, add.params = list(fill = "white"))
p4
p4 <- p4 + stat_compare_means(
aes(label = paste0("p = ", ..p.format..)))
p4
p4 <- ggviolin(ToothGrowth, x = "supp", y = "len",
fill = "supp", palette = "npg",
add = "boxplot",
facet.by = "dose", short.panel.labs = FALSE, add.params = list(fill = "white"))
p4
p4 <- p4 + stat_compare_means(
aes(label = paste0(..p.signif..)))
p4
ggarrange(p1, p2, p3, p4 + rremove("x.text"),
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
ggarrange(p1, p2, p3, p4 + rremove("x.text"),
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2) %>%
ggexport(filename = "test.png", res = 200, width = 1600, height = 1600)
ggarrange(p1, p2, p3, p4 + rremove("x.text"),
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2) %>%
ggexport(filename = "test.png", res = 200, width = 1600, height = 1200)
ggarrange(p1,                                                # First row with boxplot
ggarrange(p2, p3, ncol = 2, labels = c("B", "C")), # Second row with violinplot
nrow = 2,
labels = "A") %>%                                  # Labels of the boxplot
ggexport(filename = "test.png", res = 200, width = 1600, height = 1600)
ggarrange(p1, p2, p3, p4 + rremove("x.text"),
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2) %>%
ggexport(filename = "test.png", res = 200, width = 1600, height = 1200)
ggarrange(p1,                                                # First row with boxplot
ggarrange(p2, p3, ncol = 2, labels = c("B", "C")), # Second row with violinplot
nrow = 2,
labels = "A") %>%                                  # Labels of the boxplot
ggexport(filename = "test2.png", res = 200, width = 1600, height = 1600)
setwd("~/edx.Data Science")
library(dslab)
library(dslabs)
import.packages("dslabs")
install.packages("dslabs")
library(dslabs)
data("murders")
force(murders)
View(murders)
View(murders)
class(murders)
class("murders")
class(murders)
str(murders)
head(murders)
murders$population
data(murders)
# determining that the murders dataset is of the "data frame" class
class(murders)
# finding out more about the structure of the object
str(murders)
# using the accessor operator to obtain the population column
murders$population
# displaying the variable names in the murders dataset
names(murders)
pop <- murders$population
length(pop)
class(pop)
class(murders$state)
z <- 3 == 2
z
class(z)
# factors are another type of class
class(murders$region)
# obtaining the levels of a factor
levels(murders$region)
length(murders$population)
View(murders)
levels(murders$region)
length(murders$region)
library(dslabs)
data("murders")
data(murders)
force(murders)
View(murders)
View(murders)
table(x)
x <- c("a", "a", "b", "b", "b", "c")
table(x)
length(murders$region)
table(region)
table(murders$region)
seq(7, 50, 7)
seq(6, 55, 4/7)
seq(6, 55, 4/7)length
seq(6, 55, 4/7)length()
seq(6, 55, 4/7).length()
seq(6, 55, 4/7).length
seq((6, 55, 4/7).length)
length(seq(6, 55, 4/7))
a <- seq(6, 55, 4/7)
length(seq(a)
length(a)
a <- seq(6, 55, 4/7)
length(a)
seq(6, 55, 4/7)
length(a)
seq(6, 55, 4/7) | length(seq(6, 55, 4/7))
seq(6, 55, 4/7) | a <- seq(6, 55, 4/7) | length(a)
seq(6, 55, 4/7) | a <- seq(6, 55, 4/7)
seq(6, 55, 4/7)
seq(6, 55, 4/7), a <- (seq(6, 55, 4/7)), length(a)
seq(6, 55, 4/7): a <- (seq(6, 55, 4/7)): length(a)
seq(6, 55, 4/7) | a <- (seq(6, 55, 4/7))
